openapi: "3.0.2"
info:
  title: Carlens APIs
  version: "1.0"
servers:
  - url: http://carlen.azurewebsites.net
paths:
  /predict:
    get:
      summary: "Get all prediction results"
      tags:
        - predict
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: "#/components/schemas/Prediction"
                            - type: object
                              properties:
                                _link:
                                  type: string
                                  example: "/predict/619af4f7dee6db19206b875f"

    post:
      summary: "Create a new prediction from the image"
      tags:
        - predict
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                predict_image:
                  description: >
                    Prediction image is the car image that you want to use to
                    predict. (Allow only `.png`, `.jpg`, and `.jpeg`)
                  type: string
                  format: binary
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          id:
                            type: string
                            example: "619af4f7dee6db19206b875f"
                          _link:
                            type: string
                            example: "/predict/619af4f7dee6db19206b875f"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /predict/{id}:
    get:
      summary: "Get a prediction result by Id"
      tags:
        - predict
      parameters:
        - name: id
          description: "Id of the prediction"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Prediction"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                message: "Not found"

  /predict/images/{filename}:
    get:
      summary: "Get a prediction image by filename"
      tags:
        - predict
      parameters:
        - name: filename
          description: "Filename of the prediction"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary

  /cars:
    get:
      summary: "Get all car details"
      tags:
        - cars
      parameters:
        - name: q
          description: >
            `q` is stand for query string you can filter what ever you want
            including `brand`, `car`, and `model` (`q` is always in json format)
          in: query
          required: false
          schema:
            type: string
          example: '{"brand":"honda"}'
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: "#/components/schemas/Car"
                            - type: object
                              properties:
                                _link:
                                  type: string
                                  example: "/cars/61922b912aefc2e792f033de"

  /cars/{id}:
    get:
      summary: "Get a car detail by Id"
      tags:
        - cars
      parameters:
        - name: id
          description: "Id of the car"
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Response"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CarDetail"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                code: 404
                message: "Not found"

components:
  schemas:
    Response:
      type: object
      required:
        - status

      properties:
        status:
          type: boolean
        data:
          type: object
          additionalProperties:
            oneOf:
              - type: array
      discriminator:
        propertyName: data

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          enum: [Prediction image required, Invalid file type]

    Prediction:
      type: object
      required:
        - id
        - prediction
        - accuracy
        - fn
      properties:
        id:
          type: string
          example: "619af4f7dee6db19206b875f"
        prediction:
          type: string
          example: "Accord"
        accuracy:
          type: number
          example: 0.955053985118866
        fn:
          type: string
          example: "/predict/images/ae355d3c-9357-403b-9ed9-07f81770560d.jpg"

    Car:
      type: object
      required:
        - id
        - brand
        - car
        - model
      properties:
        id:
          type: string
          example: "61922b912aefc2e792f033de"
        brand:
          type: string
          example: "honda"
        car:
          type: string
          example: "accord"
        model:
          type: string
          example: "turboEL"

    CarDetail:
      allOf:
        - $ref: "#/components/schemas/Car"
        - type: object
          properties:
            link:
              type: string
              example: https://www.honda.co.th/accord
            overview:
              type: array
              example:
                [
                  {
                    "brand": "Honda Thailand",
                    "color_code":
                      {
                        "c1": "BFBEC4",
                        "c2": "0E0F0F",
                        "c3": "5B6169",
                        "c4": "E2E2E4",
                      },
                    "color_name":
                      {
                        "c1": "Modern Steel Metallic",
                        "c2": "Black Crystal",
                        "c3": "Lunar Silver Metallic",
                        "c4": "Platinum White Pearl",
                      },
                    "model": "Turbo EL",
                    "name": "HONDA ACCORD",
                    "price": "1480000 THB",
                    "vehicle_type": "Sedans",
                  },
                ]
            safety:
              type: array
              example:
                [
                  {
                    "Anti-Lock Braking System": "Yes",
                    "Automatic Brake Hold": "Yes",
                    "Blind Spot Monitoring": "Yes",
                    "Brake Assist": "Yes",
                    "Child Safety Locks": "Yes",
                    "Day & Night Rear View Mirror": "No",
                    "Door Open Warning": "Yes",
                    "Driver Airbag": "Yes",
                    "Driver Attention Monitor": "Yes",
                    "Electric Parking Brake": "Yes",
                    "Electronic Brakeforce Distribution": "Yes",
                    "Emergency Stop Signal": "Yes",
                    "Engine Check Warning": "Yes",
                    "Front Seat Belts Height Adjust": "Yes",
                    "Front Side Airbag": "Yes",
                    "Hill Start Assist": "Yes",
                    "Multi-View Camera System": "Yes",
                    "Parking Assist System": "No",
                    "Parking Sensors": "No",
                    "Passenger Airbag": "Yes",
                    "Rear Camera": "Yes",
                    "Rear Cross Traffic Alert": "No",
                    "Rear Seat Belts": "Yes",
                    "Rear Side Airbag": "No",
                    "Safety Sensing": "No",
                    "Seat Belt Warning": "Yes",
                    "Side Curtain Airbag": "Yes",
                    "Traction Control": "Yes",
                    "Tyre Pressure Monitor": "No",
                    "Vehicle Stability Assist": "Yes",
                  },
                ]
            security:
              type: array
              example:
                [
                  {
                    "Anti Theft Device": "Yes",
                    "Anti-Theft Alarm": "Yes",
                    "Central Locking": "Yes",
                    "Immobilizer": "Yes",
                    "Power Door Locks": "Yes",
                    "Smart Card Entry": "No",
                  },
                ]
            technical_specification:
              type: array
              example:
                [
                  {
                    "capacity":
                      [
                        {
                          "cargo_capacity": "573 L",
                          "curb_weight": "1464 kg",
                          "front_tread": "1600 mm",
                          "fuel_tank_capacity": "56 L",
                          "ground_clearance": "131 mm",
                          "height": "1450 mm",
                          "length": "4894 mm",
                          "number_of_door": 4,
                          "rear_tread": "1610 mm",
                          "seating_capacity": 5,
                          "wheel_base": "2830 mm",
                          "width": "1862 mm",
                        },
                      ],
                    "engine_details":
                      [
                        {
                          "battery_type": "No",
                          "compression_ratio": "10.3:1",
                          "engine":
                            "1.5L Turbo Petrol Engine, 4 Cylinder 16 Valve DOHC",
                          "fuel_distribution": "PGM-FI",
                          "number_of_cylinder": 4,
                          "valve_configuration": "DOHC",
                          "valves_per_cylinder": 4,
                        },
                      ],
                    "performace":
                      [
                        {
                          "engine_displacement": "1498 cc",
                          "fuel_type": "Petrol",
                          "mileage_city": 12.5,
                          "mileage_highway": 20,
                          "power": "190 PS",
                          "torque": "243 Nm",
                        },
                      ],
                    "steering":
                      [
                        {
                          "adjustable_steering_wheel": "Yes",
                          "steering_gear_type": "Dual Pinion",
                          "steering_type": "Electric Power",
                          "steering_wheel_adjustment_type": "Tilt & Telescopic",
                          "turning_radius": "6.1 m",
                        },
                      ],
                    "suspension&brakes":
                      [
                        {
                          "front_suspension": "MacPherson Strut",
                          "rear_suspension": "Multi-Link",
                          "shock_absorbers_type": "Coil Spring",
                        },
                      ],
                    "transmission":
                      [
                        {
                          "drive_type": "4WD",
                          "transmission": "Variable Speed",
                          "transmission_type": "CVT",
                        },
                      ],
                    "wheel&tyre":
                      [
                        {
                          "alloy_wheel_size": "17 Inch",
                          "tyre_size": "225/50 R17",
                          "tyre_type": "Radial",
                          "wheel_size": "R17",
                        },
                      ],
                  },
                ]
